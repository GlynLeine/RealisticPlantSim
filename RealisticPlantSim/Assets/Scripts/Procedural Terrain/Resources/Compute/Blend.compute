/// <summary>
/// Compute shader for blending 2 textures together using linear interpolation.
/// Author: Glyn Marcus Leine
/// </summary>

#pragma kernel CSBlend
 
RWTexture2D<float4> target;     // Target texture to write result to (resolution must be the same as sourceA).
Texture2D<float4> sourceA;      // First texture to use for the blend.
Texture2D<float4> sourceB;      // Second texture to use for the blend.
SamplerState samplersourceB;    // Sampler to use to sample the second texture with (can be lower or higher resolution than the first texture).
float strength;                 // Interpolator value to use for the interpolation.
int2 resolution;                // Resolution of sourceA and target.

// Convert from dispatch thread id to uv coordinate.
float2 uvFromIdx(uint2 idx)
{
    return (float2)(idx) / resolution;
}

[numthreads(32, 32, 1)]
void CSBlend(uint3 id : SV_DispatchThreadID)
{
    if (all(id.xy <= (uint2)resolution))
    {
        float2 uv = uvFromIdx(id.xy);

        float4 colorA = sourceA[id.xy];
        float4 colorB = sourceB.SampleLevel(samplersourceB, uv, 0);

        target[id.xy] = lerp(colorA, colorB, strength);
    }
}
