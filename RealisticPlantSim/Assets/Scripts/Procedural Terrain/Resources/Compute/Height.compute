#pragma kernel CSHeight

#include "noise.hlsl"

#pragma multi_compile_local SINE_WAVE_ON __

RWTexture2D<float4> target;
const float2 oneOverResolution;
const float chunkSize;
const int octaves;
float amplitude;
const float persistence;
const float lacunarity;

StructuredBuffer<float2> octaveOffsets;
const float perlinScale;
const float normalizeScale;

const float halfSineAmplitude;
const float sinePeriod;
const float chunkOffsetX;
const float perlinNoiseWeight;

[numthreads(32, 32, 1)]
void CSHeight(uint3 id : SV_DispatchThreadID)
{
    float2 offset = float2(1.0, 1.0) - saturate(id.xy);

    float freq = 1;
    float noiseHeight = 0;

    for (int i = 0; i < octaves; i++)
    {
        float2 pos = (((id.xy - offset) * oneOverResolution * chunkSize) + octaveOffsets[i]) * perlinScale * freq;

        noiseHeight += (((SimplexNoise(pos) * 0.5) + 0.5) * amplitude);

        amplitude *= persistence;
        freq *= lacunarity;
    }

    noiseHeight = noiseHeight * normalizeScale;

#if SINE_WAVE_ON
    float period = sinePeriod * (((id.x - offset.x) * oneOverResolution.x * chunkSize) + chunkOffsetX);
    float sine = (sin(period) * halfSineAmplitude) + halfSineAmplitude;

    noiseHeight = lerp(sine, noiseHeight, perlinNoiseWeight);
#endif

    noiseHeight = saturate(noiseHeight);

    target[id.xy] = float4(noiseHeight, noiseHeight, noiseHeight, 1.0);
}
